diff --git a/CHANGES.txt b/CHANGES.txt
index 0ce646a..4f61f3b 100644
--- a/CHANGES.txt
+++ b/CHANGES.txt
@@ -4,6 +4,9 @@ Changelog
 2.1.2 (unreleased)
 ------------------
 
+- Added adapters and view to be compatible with plone.app.collection.
+  [fmoret]
+
 - Fixed bug with eventdropping in agenda
   [fmoret]
 
diff --git a/Solgema/fullcalendar/browser/adapters.py b/Solgema/fullcalendar/browser/adapters.py
index 98d6cc1..3c5d501 100644
--- a/Solgema/fullcalendar/browser/adapters.py
+++ b/Solgema/fullcalendar/browser/adapters.py
@@ -12,8 +12,7 @@ from Products.ATContentTypes.interface import IATTopic, IATFolder
 
 from Solgema.fullcalendar.browser.views import getCopyObjectsUID, getColorIndex
 from Solgema.fullcalendar import interfaces
-from Solgema.fullcalendar.browser.views import listQueryTopicCriteria,\
-    getCriteriaItems, getCookieItems
+from Solgema.fullcalendar.browser.views import getCookieItems
 
 try:
     from plone.app.event.ical import EventsICal
@@ -344,7 +343,7 @@ class ColorIndexGetter(object):
 
     def getColorIndex(self):
         context, request, brain = self.context, self.request, self.source
-        criteriaItems = getCriteriaItems(context, request)
+        criteriaItems = getMultiAdapter((context, request),  interfaces.ICriteriaItems)()
         final = {'color':'',
                  'class':''}
         if not criteriaItems:
@@ -454,6 +453,190 @@ class FolderEventSource(object):
         else:
             return ''.join([b.getObject().getICal() for b in brains])
 
+class listBaseQueryTopicCriteria(object):
+    """Get criterias dicts for topic and collections
+    """
+    implements(interfaces.IListBaseQueryTopicCriteria)
+    adapts(IATTopic)
+
+    def __init__(self, context):
+        self.context = context
+    
+    def __call__(self):
+        li = []
+        for criteria in self.context.listCriteria():
+            if criteria.meta_type == 'ATPortalTypeCriterion' \
+                    and len(criteria.getCriteriaItems()[0][1]) > 0:
+                li.append({'i':criteria.Field(), 'v':criteria.getCriteriaItems()[0][1], 'o':criteria.meta_type})
+            if criteria.meta_type in ['ATSelectionCriterion', 'ATListCriterion'] \
+                    and criteria.getCriteriaItems() \
+                    and len(criteria.getCriteriaItems()[0]) > 1 \
+                    and len(criteria.getCriteriaItems()[0][1]['query']) > 0:
+                li.append({'i':criteria.Field(), 'v':criteria.getCriteriaItems()[0][1]['query'], 'o':criteria.meta_type})
+
+        return li
+
+class listBaseQueryCollectionCriteria(object):
+    """Get criterias dicts for topic and collections
+    """
+    implements(interfaces.IListBaseQueryTopicCriteria)
+    adapts(ICollection)
+
+    def __init__(self, context):
+        self.context = context
+    
+    def __call__(self):
+        return self.context.getField('query').getRaw(self.context)
+
+class listCriteriasTopicAdapter(object):
+    """Get criterias dicts for topic and collections
+    """
+    implements(interfaces.IListCriterias)
+    adapts(IATTopic)
+
+    def __init__(self, context):
+        self.context = context
+
+    def __call__(self):
+        calendar = interfaces.ISolgemaFullcalendarProperties(aq_inner(self.context), None)
+        li = interfaces.IListBaseQueryTopicCriteria(self.context)()
+        for criteria in li:
+            if criteria['o']=='ATPortalTypeCriterion' and len(criteria['v'])==1:
+                li.remove(criteria)
+
+        if hasattr(calendar, 'availableCriterias') and getattr(calendar, 'availableCriterias', None) != None:
+            li = [a for a in li if a['i'] in calendar.availableCriterias]
+
+        return dict([(a['i'], a['v']) for a in li])
+
+class listCriteriasCollectionAdapter(object):
+    """Get criterias dicts for topic and collections
+    """
+    implements(interfaces.IListCriterias)
+    adapts(ICollection)
+
+    def __init__(self, context):
+        self.context = context
+
+    def __call__(self):
+        calendar = interfaces.ISolgemaFullcalendarProperties(aq_inner(self.context), None)
+        li = interfaces.IListBaseQueryTopicCriteria(self.context)()
+        for criteria in li:
+            if criteria['i']=='portal_type' and len(criteria['v'])==1:
+                li.remove(criteria)
+
+        if hasattr(calendar, 'availableCriterias') and getattr(calendar, 'availableCriterias', None) != None:
+            li = [a for a in li if a['i'] in calendar.availableCriterias]
+
+        return dict([(a['i'], a['v']) for a in li])
+    
+def getTopic(context, request):
+    if not interfaces.ISolgemaFullcalendarMarker.providedBy(context):
+        utils = getToolByName(context, 'plone_utils')
+        page = utils.getDefaultPage(context, request)
+        pageItem = page and getattr(context, page) or None
+        if interfaces.ISolgemaFullcalendarMarker.providedBy(pageItem):
+            return pageItem
+
+        portal = getToolByName(context, 'portal_url').getPortalObject()
+        referer = unquote(request.get('last_referer', request.get('HTTP_REFERER')))
+        if referer.find('?')!=-1:
+            referer = referer[:referer.index('?')]
+
+        if referer[-5:] == '/view':
+            referer = referer[:-5]
+
+        if referer[-1:] == '/':
+            referer = referer[:-1]
+
+        portal_url = portal.absolute_url()
+        topic_url = referer.replace(portal_url, '')
+        topic_path = '/'.join(portal.getPhysicalPath()) + topic_url
+        topic = portal.restrictedTraverse(topic_path)
+        if utils.getDefaultPage(topic, request):
+            page = utils.getDefaultPage(topic, request)
+            topic_url = topic_url+'/'+page
+            topic = getattr(topic, page)
+            if interfaces.ISolgemaFullcalendarMarker.providedBy(topic):
+                return topic
+        url = '/'+portal.id+topic_url
+        while not interfaces.ISolgemaFullcalendarMarker.providedBy(topic):
+            url = url[0:url.rindex('/')]
+            try:
+                topic = portal.restrictedTraverse(url)
+            except:
+                break
+                raise str(url)
+
+        return topic
+    else:
+        return context
+
+class CriteriaItemsTopic(object):
+
+    implements(interfaces.ICriteriaItems)
+    adapts(IATTopic, Interface)
+
+    def __init__(self, context, request):
+        self.context = context
+        self.request = request
+        
+    def __call__(self):
+        topic = getTopic(self.context, self.request)
+        listCriteria = topic.listCriteria()
+        topicCriteria = interfaces.IListCriterias(topic)()
+        if topicCriteria:
+            selectedCriteria = self.request.cookies.get('sfqueryDisplay', topic.REQUEST.cookies.get('sfqueryDisplay', topicCriteria.keys()[0]))
+            criteria = [a for a in listCriteria if a.Field() == selectedCriteria]
+        else:
+            criteria = listCriteria
+
+        criteria = [a for a in criteria if a.meta_type in
+                   ['ATPortalTypeCriterion', 'ATSelectionCriterion', 'ATListCriterion']]
+        if not criteria:
+            return False
+
+        criteria = criteria[0]
+        if criteria.meta_type == 'ATPortalTypeCriterion':
+            return {'name': criteria.Field(),
+                    'values': list(criteria.getCriteriaItems()[0][1])}
+
+        if criteria.meta_type in ['ATSelectionCriterion', 'ATListCriterion']:
+            return {'name': criteria.Field(),
+                    'values': list(criteria.getCriteriaItems()[0][1]['query']) + ['']
+                    }
+
+        return False
+
+class CriteriaItemsCollection(object):
+
+    implements(interfaces.ICriteriaItems)
+    adapts(ICollection, Interface)
+
+    def __init__(self, context, request):
+        self.context = context
+        self.request = request
+        
+    def __call__(self):
+        topic = getTopic(self.context, self.request)
+        listCriteria = self.context.getField('query').getRaw(self.context)
+        topicCriteria = interfaces.IListCriterias(topic)()
+        if topicCriteria:
+            selectedCriteria = self.request.cookies.get('sfqueryDisplay', topic.REQUEST.cookies.get('sfqueryDisplay', topicCriteria.keys()[0]))
+            criteria = [a for a in listCriteria if a['i'] == selectedCriteria]
+        else:
+            criteria = listCriteria
+
+        criteria = [a for a in criteria if a['o'] in
+                   ['plone.app.querystring.operation.selection.is', 'plone.app.querystring.operation.list.contains'] or 
+                   a['i'] == 'portal_type']
+        if not criteria:
+            return False
+
+        criteria = criteria[0]
+
+        return {'name': criteria['i'],
+                'values': criteria['v']}
 
 class TopicEventSource(FolderEventSource):
     """Event source that get events from the topic
@@ -466,12 +649,13 @@ class TopicEventSource(FolderEventSource):
         response = request.response
 
         query = context.buildQuery()
-        topicCriteria = listQueryTopicCriteria(context)
+        topicCriteria = interfaces.IListCriterias(context)()
+        listCriteria = context.listCriteria()
         args = {}
         if not query:
             return ({}, [])
 
-        props = getToolByName(self.context, 'portal_properties')
+        props = getToolByName(context, 'portal_properties')
         charset = props and props.site_properties.default_charset or 'utf-8'
 
         if 'Type' in query.keys():
@@ -482,25 +666,26 @@ class TopicEventSource(FolderEventSource):
                 args['Type'] = query['Type']
         filters = []
         #reinit cookies if criterions are no more there
-        for criteria in context.listCriteria():
-            if criteria not in listQueryTopicCriteria(context):
-                response.expireCookie(criteria.Field())
+        for cId in [c.Field() for c in listCriteria]:
+            if cId not in topicCriteria.keys():
+                response.expireCookie(cId)
 
-        if request.cookies.get('sfqueryDisplay', None) not in [a.Field() for a in topicCriteria]:
+        if request.cookies.get('sfqueryDisplay', None) not in topicCriteria.keys():
             response.expireCookie('sfqueryDisplay')
 
-        for criteria in self.context.listCriteria():
-            if criteria.meta_type not in ['ATSelectionCriterion', 'ATListCriterion', 'ATSortCriterion', 'ATPortalTypeCriterion'] and criteria.Field():
-                args[criteria.Field()] = query[criteria.Field()]
+        for criteria in listCriteria:
+            criteriaId = criteria.Field()
+            if criteria.meta_type not in ['ATSelectionCriterion', 'ATListCriterion', 'ATSortCriterion', 'ATPortalTypeCriterion'] and criteriaId:
+                args[criteriaId] = query[criteriaId]
             elif criteria.meta_type in ['ATSelectionCriterion', 'ATListCriterion'] and criteria.getCriteriaItems() and len(criteria.getCriteriaItems()[0])>1 and len(criteria.getCriteriaItems()[0][1]['query'])>0:
-                items = getCookieItems(request, criteria.Field(), charset)
-                if items and criteria in topicCriteria:
+                items = getCookieItems(request, criteriaId, charset)
+                if items and criteriaId in topicCriteria.keys():
                     if 'undefined' in items:
-                        filters.append({'name':criteria.Field(), 'values':items})
+                        filters.append({'name':criteriaId, 'values':items})
                     else:
-                        args[criteria.Field()] = items
+                        args[criteriaId] = items
                 else:
-                    args[criteria.Field()] = query[criteria.Field()]
+                    args[criteriaId] = query[criteriaId]
 
         return args, filters
 
@@ -536,6 +721,53 @@ class CollectionEventSource(TopicEventSource):
     implements(interfaces.IEventSource)
     adapts(ICollection, Interface)
 
+    def _getCriteriaArgs(self):
+        context, request = self.context, self.request
+        response = request.response
+    
+        queryField = context.getField('query')
+        listCriteria = queryField.getRaw(context)
+
+        query = dict([(a['i'], a['v']) for a in listCriteria])
+        topicCriteria = interfaces.IListCriterias(context)()
+        args = {}
+        if not query:
+            return ({}, [])
+
+        props = getToolByName(context, 'portal_properties')
+        charset = props and props.site_properties.default_charset or 'utf-8'
+
+        if 'Type' in query.keys():
+            items = getCookieItems(request, 'Type', charset)
+            if items:
+                args['Type'] = items
+            else:
+                args['Type'] = query['Type']
+        filters = []
+        #reinit cookies if criterions are no more there
+        for cId in [c['i'] for c in listCriteria]:
+            if cId not in topicCriteria.keys():
+                response.expireCookie(cId)
+
+        if request.cookies.get('sfqueryDisplay', None) not in topicCriteria.keys():
+            response.expireCookie('sfqueryDisplay')
+
+        for criteria in listCriteria:
+            criteriaId = criteria['i']
+            if criteria['o'] not in ['plone.app.querystring.operation.selection.is', 'plone.app.querystring.operation.list.contains'] and criteriaId != 'portal_type':
+                args[criteriaId] = query[criteriaId]
+            else:
+                items = getCookieItems(request, criteriaId, charset)
+                if items and criteriaId in topicCriteria.keys():
+                    if 'undefined' in items:
+                        filters.append({'name':criteriaId, 'values':items})
+                    else:
+                        args[criteriaId] = items
+                else:
+                    args[criteriaId] = query[criteriaId]
+
+        return args, filters
+
 class StandardEventSource(object):
     """Event source that display an event
     """
diff --git a/Solgema/fullcalendar/browser/configure.zcml b/Solgema/fullcalendar/browser/configure.zcml
index 7a95cf7..440161b 100644
--- a/Solgema/fullcalendar/browser/configure.zcml
+++ b/Solgema/fullcalendar/browser/configure.zcml
@@ -9,8 +9,6 @@
   <include package="Products.CMFCore" file="configure.zcml" />
   <include package="plone.app.contentmenu" zcml:condition="installed plone.app.contentmenu" />
 
-  <include file="ploneappcollection.zcml" zcml:condition="installed plone.app.collection" />
-
   <browser:menuItem zcml:condition="have plone-4"
       for="Solgema.fullcalendar.interfaces.ISolgemaFullcalendarMarker"
       menu="plone_displayviews"
@@ -40,6 +38,17 @@
       permission="zope.Public"
       />
 
+  <!-- THE CALENDAR VIEW FOR Collection -->
+  <browser:page
+      zcml:condition="installed plone.app.collection"
+      for="plone.app.collection.interfaces.ICollection"
+      name="solgemafullcalendar_view"
+      class=".views.SolgemaFullcalendarCollectionView"
+      template="collectionview.pt"
+      allowed_interface="Solgema.fullcalendar.interfaces.ISolgemaFullcalendarView"
+      permission="zope.Public"
+      />
+      
   <!-- THE CALENDAR VIEW FOR ATEVENT-->
   <browser:page
       for="Products.ATContentTypes.interface.IATEvent"
@@ -79,7 +88,17 @@
       permission="zope.Public"
       />
 
-  <!-- THE CALENDAR COLORS CSS GENERATED FOR FOLDER-->
+  <!-- THE CALENDAR COLORS CSS GENERATED -->
+
+
+  <browser:page
+      for="Solgema.fullcalendar.interfaces.ISolgemaFullcalendarMarker"
+      name="solgemafullcalendar_colors.css"
+      class=".views.SolgemaFullcalendarColorsCssFolder"
+      allowed_interface="Solgema.fullcalendar.interfaces.ISolgemaFullcalendarColorsCss"
+      permission="zope.Public"
+      />
+
   <browser:page
       for="Products.ATContentTypes.interface.IATFolder"
       name="solgemafullcalendar_colors.css"
@@ -88,7 +107,6 @@
       permission="zope.Public"
       />
 
-  <!-- THE CALENDAR COLORS CSS GENERATED FOR TOPIC -->
   <browser:page
       for="Products.ATContentTypes.interface.IATTopic"
       name="solgemafullcalendar_colors.css"
@@ -97,6 +115,15 @@
       permission="zope.Public"
       />
 
+  <browser:page
+      zcml:condition="installed plone.app.collection"
+      for="plone.app.collection.interfaces.ICollection"
+      name="solgemafullcalendar_colors.css"
+      class=".views.SolgemaFullcalendarColorsCssCollection"
+      allowed_interface="Solgema.fullcalendar.interfaces.ISolgemaFullcalendarColorsCss"
+      permission="zope.Public"
+      />
+
   <!-- THE CALENDAR EVENT QUERY AND RENDERED AS JSON -->
 
   <browser:page
@@ -116,7 +143,6 @@
       template="layout.pt"
       />
 
-  <!-- FORM FOR CALENDAR PROPERTIES -->
   <browser:page
       for="Products.ATContentTypes.interface.IATTopic"
       name="solgemafullcalendar_properties"
@@ -125,6 +151,15 @@
       template="layout.pt"
       />
 
+  <browser:page
+      zcml:condition="installed plone.app.collection"
+      for="plone.app.collection.interfaces.ICollection"
+      name="solgemafullcalendar_properties"
+      class=".content.SolgemaFullcalendarFormTopic"
+      permission="cmf.ModifyPortalContent"
+      template="layout.pt"
+      />
+
   <!-- AJAX ACTIONS DONE IN THE CALENDAR -->
   <browser:page
       for="*"
@@ -157,6 +192,14 @@
       />
 
   <browser:page
+      zcml:condition="installed plone.app.collection"
+      for="plone.app.collection.interfaces.ICollection"
+      name="SFEventSources"
+      class=".views.SFCollectionSources"
+      permission="zope2.View"
+      />
+
+  <browser:page
       for="Products.ATContentTypes.interface.IATFolder"
       name="SFEventSources"
       class=".views.SFFolderSources"
@@ -229,23 +272,33 @@
       class="plone.app.viewletmanager.manager.OrderedViewletManager"
       />
 
-   <browser:viewlet
-        for="Products.ATContentTypes.interface.IATTopic"
-        name="Solgema.fullcalendar.query"
-        manager="Solgema.fullcalendar.interfaces.ISolgemaFullcalendarQuery"
-        class=".query.SolgemaFullcalendarTopicQuery"
-        template="topicquery.pt"
-        permission="zope2.View"
-     />
+  <browser:viewlet
+      for="Products.ATContentTypes.interface.IATTopic"
+      name="Solgema.fullcalendar.query"
+      manager="Solgema.fullcalendar.interfaces.ISolgemaFullcalendarQuery"
+      class=".query.SolgemaFullcalendarTopicQuery"
+      template="topicquery.pt"
+      permission="zope2.View"
+      />
 
-   <browser:viewlet
-        for="Products.ATContentTypes.interface.IATFolder"
-        name="Solgema.fullcalendar.query"
-        manager="Solgema.fullcalendar.interfaces.ISolgemaFullcalendarQuery"
-        class=".query.SolgemaFullcalendarFolderQuery"
-        template="folderquery.pt"
-        permission="zope2.View"
-     />
+  <browser:viewlet
+      zcml:condition="installed plone.app.collection"
+      for="plone.app.collection.interfaces.ICollection"
+      name="Solgema.fullcalendar.query"
+      manager="Solgema.fullcalendar.interfaces.ISolgemaFullcalendarQuery"
+      class=".query.SolgemaFullcalendarCollectionQuery"
+      template="collectionquery.pt"
+      permission="zope2.View"
+      />
+
+  <browser:viewlet
+      for="Products.ATContentTypes.interface.IATFolder"
+      name="Solgema.fullcalendar.query"
+      manager="Solgema.fullcalendar.interfaces.ISolgemaFullcalendarQuery"
+      class=".query.SolgemaFullcalendarFolderQuery"
+      template="folderquery.pt"
+      permission="zope2.View"
+      />
 
   <!-- ADAPTERS -->
 
@@ -284,8 +337,30 @@
        factory=".adapters.TopicEventSource" />
 
   <adapter
+       factory=".adapters.CollectionEventSource" />
+
+  <adapter
        factory=".adapters.StandardEventSource" />
 
+  <adapter
+       factory=".adapters.listCriteriasTopicAdapter" />
+
+  <adapter
+       factory=".adapters.listCriteriasCollectionAdapter" />
+
+  <adapter
+       factory=".adapters.listBaseQueryTopicCriteria" />
+
+  <adapter
+       factory=".adapters.listBaseQueryCollectionCriteria" />
+
+  <adapter
+       factory=".adapters.CriteriaItemsTopic" />
+
+  <adapter
+       factory=".adapters.CriteriaItemsCollection" />
+       
+
   <!-- Actions -->
   <browser:page
       for="*"
diff --git a/Solgema/fullcalendar/browser/query.py b/Solgema/fullcalendar/browser/query.py
index 5efade4..806c066 100644
--- a/Solgema/fullcalendar/browser/query.py
+++ b/Solgema/fullcalendar/browser/query.py
@@ -3,8 +3,8 @@ from zope import component
 from plone.app.layout.viewlets.common import ViewletBase
 from Products.CMFCore.utils import getToolByName
 
-from Solgema.fullcalendar.interfaces import ISolgemaFullcalendarProperties
-from Solgema.fullcalendar.browser.views import listQueryTopicCriteria, getCookieItems
+from Solgema.fullcalendar.interfaces import ISolgemaFullcalendarProperties, IListCriterias
+from Solgema.fullcalendar.browser.views import getCookieItems
 from zope.schema.interfaces import IVocabularyFactory
 
 class SolgemaFullcalendarTopicQuery(ViewletBase):
@@ -14,7 +14,18 @@ class SolgemaFullcalendarTopicQuery(ViewletBase):
         self.calendar = ISolgemaFullcalendarProperties(aq_inner(self.context), None)
 
     def listQueryTopicCriteria(self):
-        return listQueryTopicCriteria(self.context)
+        li = []
+        for criteria in self.context.listCriteria():
+            if criteria.meta_type in ['ATSelectionCriterion', 'ATListCriterion'] \
+                    and criteria.getCriteriaItems() \
+                    and len(criteria.getCriteriaItems()[0]) > 1 \
+                    and len(criteria.getCriteriaItems()[0][1]['query']) > 0:
+                li.append(criteria)
+
+        if hasattr(self.calendar, 'availableCriterias') and getattr(self.calendar, 'availableCriterias', None) != None:
+            li = [a for a in li if a.Field() in self.calendar.availableCriterias]
+
+        return li
 
     def displayUndefined(self):
         return getattr(self.calendar, 'displayUndefined', False)
@@ -24,6 +35,20 @@ class SolgemaFullcalendarTopicQuery(ViewletBase):
         charset = props and props.site_properties.default_charset or 'utf-8'
         return getCookieItems(self.request, field, charset)
 
+class SolgemaFullcalendarCollectionQuery(SolgemaFullcalendarTopicQuery):
+
+    def listQueryTopicCriteria(self):
+        li = []
+        for a in self.context.getField('query').getRaw(self.context):
+            if a['o'] in ['plone.app.querystring.operation.selection.is', 'plone.app.querystring.operation.list.contains'] \
+                    and a['i'] != 'portal_type' and len(a['v'])>0:
+                li.append(a)
+
+        if hasattr(self.calendar, 'availableCriterias') and getattr(self.calendar, 'availableCriterias', None) != None:
+            li = [a for a in li if a['i'] in self.calendar.availableCriterias]
+
+        return li
+
 class SolgemaFullcalendarFolderQuery(ViewletBase):
 
     def __init__(self, *args, **kwargs):
diff --git a/Solgema/fullcalendar/browser/topicquery.pt b/Solgema/fullcalendar/browser/topicquery.pt
index b6b30b3..f327427 100644
--- a/Solgema/fullcalendar/browser/topicquery.pt
+++ b/Solgema/fullcalendar/browser/topicquery.pt
@@ -36,7 +36,7 @@
                             value item;
                             checked python:item in selectedItems and 'checked' or None;
                             id string:criterion-$field-$item;"/>
-          <label tal:define="reviewclass python:criteria.Field()=='review_state' and ' state-'+item or '';"
+          <label tal:define="reviewclass python:field=='review_state' and ' state-'+item or '';"
                  tal:attributes="for string:criterion-$field-$item;
                                  class string:${field}colorIndex-${repeat/item/index} colorIndex-${repeat/item/index}${reviewclass}"
                  tal:content="item"/>
diff --git a/Solgema/fullcalendar/browser/views.py b/Solgema/fullcalendar/browser/views.py
index 977187b..b670104 100644
--- a/Solgema/fullcalendar/browser/views.py
+++ b/Solgema/fullcalendar/browser/views.py
@@ -56,90 +56,6 @@ def listBaseQueryTopicCriteria(topic):
     return li
 
 
-def listQueryTopicCriteria(topic):
-    calendar = interfaces.ISolgemaFullcalendarProperties(aq_inner(topic), None)
-    li = listBaseQueryTopicCriteria(topic)
-    for criteria in li:
-        if criteria.meta_type=='ATPortalTypeCriterion' and len(criteria.getCriteriaItems()[0][1])==1:
-            li.remove(criteria)
-
-    if hasattr(calendar, 'availableCriterias') and getattr(calendar, 'availableCriterias', None) != None:
-        li = [a for a in li if a.Field() in calendar.availableCriterias]
-
-    return li
-
-
-def getTopic(context, request):
-    if not interfaces.ISolgemaFullcalendarMarker.providedBy(context):
-        utils = getToolByName(context, 'plone_utils')
-        page = utils.getDefaultPage(context, request)
-        pageItem = page and getattr(context, page) or None
-        if interfaces.ISolgemaFullcalendarMarker.providedBy(pageItem):
-            return pageItem
-
-        portal = getToolByName(context, 'portal_url').getPortalObject()
-        referer = unquote(request.get('last_referer', request.get('HTTP_REFERER')))
-        if referer.find('?')!=-1:
-            referer = referer[:referer.index('?')]
-
-        if referer[-5:] == '/view':
-            referer = referer[:-5]
-
-        if referer[-1:] == '/':
-            referer = referer[:-1]
-
-        portal_url = portal.absolute_url()
-        topic_url = referer.replace(portal_url, '')
-        topic_path = '/'.join(portal.getPhysicalPath()) + topic_url
-        topic = portal.restrictedTraverse(topic_path)
-        if utils.getDefaultPage(topic, request):
-            page = utils.getDefaultPage(topic, request)
-            topic_url = topic_url+'/'+page
-            topic = getattr(topic, page)
-            if interfaces.ISolgemaFullcalendarMarker.providedBy(topic):
-                return topic
-        url = '/'+portal.id+topic_url
-        while not interfaces.ISolgemaFullcalendarMarker.providedBy(topic):
-            url = url[0:url.rindex('/')]
-            try:
-                topic = portal.restrictedTraverse(url)
-            except:
-                break
-                raise str(url)
-
-        return topic
-    else:
-        return context
-
-
-def getCriteriaItems(context, request):
-    topic = getTopic(context, request)
-    listCriteria = topic.listCriteria()
-    topicCriteria = listQueryTopicCriteria(topic)
-    if topicCriteria:
-        selectedCriteria = request.cookies.get('sfqueryDisplay', topic.REQUEST.cookies.get('sfqueryDisplay', topicCriteria[0].Field()))
-        criteria = [a for a in listCriteria if a.Field() == selectedCriteria]
-    else:
-        criteria = listCriteria
-
-    criteria = [a for a in criteria if a.meta_type in
-                   ['ATPortalTypeCriterion', 'ATSelectionCriterion', 'ATListCriterion']]
-    if not criteria:
-        return False
-
-    criteria = criteria[0]
-    if criteria.meta_type == 'ATPortalTypeCriterion':
-        return {'name': criteria.Field(),
-                'values': list(criteria.getCriteriaItems()[0][1])}
-
-    if criteria.meta_type in ['ATSelectionCriterion', 'ATListCriterion']:
-        return {'name': criteria.Field(),
-                'values': list(criteria.getCriteriaItems()[0][1]['query']) + ['']
-                }
-
-    return False
-
-
 def getCookieItems(request, field, charset):
     items = request.form.get(field)
     if items:
@@ -216,6 +132,22 @@ class SolgemaFullcalendarTopicView(SolgemaFullcalendarView):
 
         return self.request.cookies.get('sfqueryDisplay', listCriteria[0].Field())
 
+class SolgemaFullcalendarCollectionView(SolgemaFullcalendarView):
+    """Solgema Fullcalendar Browser view for Fullcalendar rendering"""
+
+    def getCriteriaClass(self):
+        queryField = self.context.getField('query').getRaw(self.context)
+        listCriteria = []
+        for qField in queryField:
+            listCriteria.append(qField['i'])
+        anon = self.context.portal_membership.isAnonymousUser()
+        if not listCriteria:
+            return ''
+        if listCriteria[0] == 'review_state' and anon:
+            return ''
+
+        return self.request.cookies.get('sfqueryDisplay', listCriteria[0])
+
 class SolgemaFullcalendarEventJS(BrowserView):
     """Solgema Fullcalendar Javascript variables"""
 
@@ -510,7 +442,7 @@ class SFTopicSources(SolgemaFullcalendarView):
         fromCookie = True
         if values == None:
             fromCookie = False
-            CriteriaItems = getCriteriaItems(self.context, self.request)
+            CriteriaItems = getMultiAdapter((self.context, self.request),  interfaces.ICriteriaItems)()
             values = CriteriaItems and [a for a in CriteriaItems['values'] if a] or []
             criteria = CriteriaItems['name']
         eventSources = []
@@ -550,6 +482,9 @@ class SFTopicSources(SolgemaFullcalendarView):
 
         return json.dumps(eventSources, sort_keys=True)
 
+class SFCollectionSources(SFTopicSources):
+    """Sources for collection"""
+
 class SFFolderSources(SolgemaFullcalendarView):
 
     implements(interfaces.ISolgemaFullcalendarEventsSources)
@@ -683,27 +618,15 @@ class SolgemaFullcalendarColorsCssTopic(BrowserView):
 
     def __call__(self):
         colorsDict = self.calendar.queryColors
-        try:
-            criterias = listBaseQueryTopicCriteria(self.context)
-        except:
-            raise ValueError(str(self.context.query))
+        criterias = interfaces.IListBaseQueryTopicCriteria(self.context)()
         css = ''
         if not colorsDict:
             return css
 
-        for criteria in criterias:
-            field = criteria.Field()
-
-            fieldid = str(field)
+        for fieldid, selectedItems in [(a['i'], a['v']) for a in criterias]:
             if not colorsDict.has_key(fieldid):
                 continue
 
-            selectedItems = []
-            if criteria.meta_type in ['ATSelectionCriterion', 'ATListCriterion']:
-                selectedItems = criteria.getCriteriaItems()[0][1]['query']
-            elif criteria.meta_type == 'ATPortalTypeCriterion':
-                selectedItems = criteria.getCriteriaItems()[0][1]
-
             for i in range(len(selectedItems)):
                 cValName = str(component.queryUtility(IURLNormalizer).normalize(safe_unicode(selectedItems[i])))
 
@@ -719,3 +642,8 @@ class SolgemaFullcalendarColorsCssTopic(BrowserView):
                     css += '}\n\n'
 
         return css
+
+class SolgemaFullcalendarColorsCssCollection(SolgemaFullcalendarColorsCssTopic):
+    """Solgema Fullcalendar Javascript variables"""
+
+
diff --git a/Solgema/fullcalendar/interfaces.py b/Solgema/fullcalendar/interfaces.py
index 5eb08fd..0d7785a 100644
--- a/Solgema/fullcalendar/interfaces.py
+++ b/Solgema/fullcalendar/interfaces.py
@@ -343,3 +343,15 @@ class IEventSource(Interface):
     def getIcal(self):
         """Ical export of events
         """
+
+class IListCriterias(Interface):
+    """Adapter that lists criterias for topic and collections
+    """
+
+class ICriteriaItems(Interface):
+    """Adapter that returns the selected criteria in calendar
+    """
+
+class IListBaseQueryTopicCriteria(Interface):
+    """Adapter that lists criterias for topic and collections
+    """
diff --git a/Solgema/fullcalendar/skins/solgemafullcalendar/solgemacolorpicker.js b/Solgema/fullcalendar/skins/solgemafullcalendar/solgemacolorpicker.js
index 0a6558d..07f4a31 100644
--- a/Solgema/fullcalendar/skins/solgemafullcalendar/solgemacolorpicker.js
+++ b/Solgema/fullcalendar/skins/solgemafullcalendar/solgemacolorpicker.js
@@ -3,8 +3,8 @@ function initColorpicker() {
         var name = jq(elem).attr('name')
         jq(elem).ColorPicker({
 	    onChange: function(hsb, hex, rgb, el) {
-		jq('input[name='+name+']').val('#' + hex);
-                jq('input[name='+name+']').css('backgroundColor', '#' + hex);
+		jq('input[name="'+name+'"]').val('#' + hex);
+                jq('input[name="'+name+'"]').css('backgroundColor', '#' + hex);
 	    },
 	    onSubmit: function(hsb, hex, rgb, el) {
 		jq(el).val('#' + hex);
diff --git a/Solgema/fullcalendar/vocabularies.py b/Solgema/fullcalendar/vocabularies.py
index bb4b1c4..5e08cd0 100644
--- a/Solgema/fullcalendar/vocabularies.py
+++ b/Solgema/fullcalendar/vocabularies.py
@@ -3,7 +3,7 @@ from Products.CMFCore.utils import getToolByName
 from Products.CMFPlone import PloneLocalesMessageFactory as PLMF
 
 from Solgema.fullcalendar.config import _
-
+from Solgema.fullcalendar import interfaces
 
 class TitledVocabulary(vocabulary.SimpleVocabulary):
     def fromTitles(cls, items, *interfaces):
@@ -42,17 +42,18 @@ def daysOfWeek( context ):
 def dayHours( context ):
     return TitledVocabulary.fromTitles([(a, a<10 and '0'+str(a)+':00' or str(a)+':00') for a in range(25)])
 
-def availableCriterias( topic ):
+def availableCriterias( context ):
+    criterias = interfaces.IListBaseQueryTopicCriteria(context)()
     li = []
-    portal_atct = getToolByName(topic, 'portal_atct')
-    for criteria in topic.listCriteria():
-        field = criteria.Field()
-        if criteria.meta_type=='ATPortalTypeCriterion' and len(criteria.getCriteriaItems()[0][1])>0:
+    portal_atct = getToolByName(context, 'portal_atct')
+    for criteria in criterias:
+        field = criteria['i']
+        if (criteria['o']=='ATPortalTypeCriterion' or criteria['i']=='portal_type') and len(criteria['v'])>0:
             index = portal_atct.getIndex(field).friendlyName or portal_atct.getIndex(field).index
-            li.append({'id':field, 'title':topic.translate(index)})
-        elif criteria.meta_type in ['ATSelectionCriterion', 'ATListCriterion'] and criteria.getCriteriaItems() and len(criteria.getCriteriaItems()[0])>1 and len(criteria.getCriteriaItems()[0][1]['query'])>0:
+            li.append({'id':field, 'title':context.translate(index)})
+        elif criteria['o'] in ['ATSelectionCriterion', 'ATListCriterion', 'plone.app.querystring.operation.selection.is', 'plone.app.querystring.operation.list.contains'] and len(criteria['v'])>0:
             index = portal_atct.getIndex(field).friendlyName or portal_atct.getIndex(field).index
-            li.append({'id':field, 'title':topic.translate(index)})
+            li.append({'id':field, 'title':context.translate(index)})
 
     return TitledVocabulary.fromTitles([(crit['id'], crit['title']) for crit in li])
 
diff --git a/Solgema/fullcalendar/widgets/widgets.py b/Solgema/fullcalendar/widgets/widgets.py
index 74d792f..93e464f 100644
--- a/Solgema/fullcalendar/widgets/widgets.py
+++ b/Solgema/fullcalendar/widgets/widgets.py
@@ -18,8 +18,7 @@ except:
     hasPAC = False
 
 from Solgema.fullcalendar.config import _
-from Solgema.fullcalendar.browser.views import listBaseQueryTopicCriteria
-from Solgema.fullcalendar.interfaces import ICustomUpdatingDict, ISolgemaFullcalendarProperties
+from Solgema.fullcalendar.interfaces import ICustomUpdatingDict, ISolgemaFullcalendarProperties, IListBaseQueryTopicCriteria
 
 
 class IColorDictInputWidget(interfaces.IWidget):
@@ -37,32 +36,23 @@ class ColorDictInputWidget(Widget):
     def getCriteriaKeys(self):
         li = []
         if IATTopic.providedBy(self.context) or hasPAC:
-            criteria = listBaseQueryTopicCriteria(self.context)
-            for criterion in criteria:
-                field = criterion.Field()
-                fieldid = str(field)
-                li.append(self.name+'.'+fieldid)
+            criteria = IListBaseQueryTopicCriteria(self.context)()
+            for criterion in [a['i'] for a in criteria]:
+                li.append(self.name+'.'+criterion)
         return li
 
     def getCriteria(self):
         if IATTopic.providedBy(self.context) or hasPAC:
-            return listBaseQueryTopicCriteria(self.context)
+            return IListBaseQueryTopicCriteria(self.context)()
         return []
 
     def render(self):
         currentValues = self.value or {}
         criteria = self.getCriteria()
         html = ''
-        for criterion in criteria:
-            field = criterion.Field()
-            index = self.context.portal_atct.getIndex(field)
-            fieldid = str(field)
+        for fieldid, selectedItems in [(a['i'], a['v']) for a in criteria]:
+            index = self.context.portal_atct.getIndex(fieldid)
             fieldname = index.friendlyName or index.index
-            selectedItems = []
-            if criterion.meta_type in ['ATSelectionCriterion', 'ATListCriterion']:
-                selectedItems = criterion.getCriteriaItems()[0][1]['query']
-            elif criterion.meta_type == 'ATPortalTypeCriterion':
-                selectedItems = criterion.getCriteriaItems()[0][1]
             if selectedItems:
                 html += '<br/><b>%s</b><br/><table>' % (fieldname)
                 for item in selectedItems:
diff --git a/setup.py b/setup.py
index 79c56c6..acc89e0 100755
--- a/setup.py
+++ b/setup.py
@@ -1,6 +1,6 @@
 from setuptools import setup, find_packages
 
-version = '2.1.1'
+version = '2.1.2'
 
 setup(name='Solgema.fullcalendar',
       version=version,
